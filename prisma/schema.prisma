datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Tenant {
  id          String       @id @default(cuid())
  name        String
  slug        String       @unique
  isActive    Boolean      @default(true)
  isPublic    Boolean      @default(true)
  users       User[]
  departments Department[]
  inviteCodes InviteCode[]
  categories  Category[]  
  schedules   Schedule[] 
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model User {
  id        String           @id @default(cuid())
  email     String           @unique
  name      String
  password  String
  tenant    Tenant           @relation(fields: [tenantId], references: [id])
  tenantId  String
  roles     UserRole[]
  memberFunctions MemberFunction[]
  scheduleMembers ScheduleMember[] 
  isActive  Boolean          @default(true)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model Department {
  id        String           @id @default(cuid())
  name      String
  tenant    Tenant           @relation(fields: [tenantId], references: [id])
  tenantId  String
  features  Json
  roles     UserRole[]
  categories CategoryDepartment[] 
  schedules Schedule[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model UserRole {
  id           String      @id @default(cuid())
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  department   Department? @relation(fields: [departmentId], references: [id])
  departmentId String?
  role         String
}

model Category {
  id          String               @id @default(cuid())
  name        String
  description String?
  tenant      Tenant?              @relation(fields: [tenantId], references: [id])
  tenantId    String?
  subcategories Subcategory[]   
  departments CategoryDepartment[] 
  memberFunctions MemberFunction[]
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt

  @@unique([name, tenantId])
}

model Subcategory {
  id          String               @id @default(cuid())
  name        String
  description String?
  category    Category             @relation(fields: [categoryId], references: [id])
  categoryId  String
  memberFunctions MemberFunction[] 
  scheduleMembers ScheduleMember[] 
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt

  @@unique([name, categoryId])
}

model CategoryDepartment {
  id           String     @id @default(cuid())
  category     Category   @relation(fields: [categoryId], references: [id])
  categoryId   String
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([categoryId, departmentId])
}

model MemberFunction {
  id            String       @id @default(cuid())
  user          User         @relation(fields: [userId], references: [id])
  userId        String
  category      Category     @relation(fields: [categoryId], references: [id])
  categoryId    String
  subcategory   Subcategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId String?
  notes         String?   
  isActive      Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@unique([userId, categoryId, subcategoryId]) 
}

model Schedule {
  id           String           @id @default(cuid())
  title        String        
  description  String?
  date         DateTime     
  endDate      DateTime?     
  department   Department       @relation(fields: [departmentId], references: [id])
  departmentId String
  tenant       Tenant           @relation(fields: [tenantId], references: [id])
  tenantId     String
  status       ScheduleStatus   @default(DRAFT) 
  members      ScheduleMember[] 
  isActive     Boolean          @default(true)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@index([date, departmentId])
  @@index([tenantId, date])
}

model ScheduleMember {
  id            String       @id @default(cuid())
  schedule      Schedule     @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  scheduleId    String
  user          User         @relation(fields: [userId], references: [id])
  userId        String
  subcategory   Subcategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId String?   
  notes         String? 
  status        MemberStatus @default(CONFIRMED)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@unique([scheduleId, userId, subcategoryId]) 
  @@index([userId, scheduleId])
}

enum ScheduleStatus {
  DRAFT      
  PUBLISHED  
  CONFIRMED 
  COMPLETED 
  CANCELLED 
}

enum MemberStatus {
  CONFIRMED  
  PENDING    
  DECLINED   
  ABSENT  
}

model InviteCode {
  id        String    @id @default(cuid())
  code      String    @unique
  tenant    Tenant    @relation(fields: [tenantId], references: [id])
  tenantId  String
  expiresAt DateTime?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}